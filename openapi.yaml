openapi: 3.0.3
info:
  title: ScholarAI API
  description: |
    ScholarAI is an intelligent research assistant platform that helps researchers
    manage projects, retrieve and analyze papers, identify gaps, suggest topics,
    and set reading reminders. The API provides endpoints for authentication,
    project management, paper analysis, and AI-assisted research workflows.
  version: 1.0.1
  termsOfService: https://www.scholarai.com/terms
  contact:
    name: ScholarAI Support
    email: support@scholarai.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.scholarai.com/v1
    description: Production server
  - url: https://staging-api.scholarai.com/v1
    description: Staging server

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User registration, login, verification, and token management
  - name: Projects
    description: Create, retrieve, update, and delete research projects
  - name: Papers
    description: Manage and operate on papers within a project
  - name: Analysis
    description: AI-powered analysis, including gap analysis and topic suggestion
  - name: Chat
    description: Contextual Q&A chat on project papers
  - name: Reminders
    description: Reading reminders and calendar integration
  - name: Reading List
    description: Manage your reading progress and lists

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT obtained from the `/auth/login` endpoint

  parameters:
    projectId:
      name: projectId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Identifier of the project
    paperId:
      name: paperId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Identifier of the paper
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
      description: Maximum number of items to return
    offset:
      name: offset
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
      description: Offset for pagination
    sort:
      name: sort
      in: query
      schema:
        type: string
        enum: [createdAt_asc, createdAt_desc, score_asc, score_desc, title_asc, title_desc]
        default: createdAt_desc
      description: Sort criteria for results

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Programmatic error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Time when the error occurred
        path:
          type: string
          description: API path that caused the error
        
    RateLimitError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            retryAfter:
              type: integer
              description: Seconds until retry is allowed
            limit:
              type: integer
              description: Rate limit for the endpoint
            remaining:
              type: integer
              description: Remaining requests allowed
              
    Pagination:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items available
        limit:
          type: integer
          description: Requested page size
        offset:
          type: integer
          description: Requested page offset
        next:
          type: string
          format: uri
          nullable: true
          description: URL for the next page (if available)
        previous:
          type: string
          format: uri
          nullable: true
          description: URL for the previous page (if available)

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string
          minLength: 2
        institution:
          type: string
        researchInterests:
          type: array
          items:
            type: string

    RegisterResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        message:
          type: string
          description: Success message
        requiresEmailVerification:
          type: boolean
          description: Whether email verification is required

    VerifyEmailRequest:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
          minLength: 6
          maxLength: 6
          pattern: '^[0-9]{6}$'

    ResendOtpRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - email
        - token
        - newPassword
      properties:
        email:
          type: string
          format: email
        token:
          type: string
        newPassword:
          type: string
          format: password
          minLength: 8

    SocialAuthRequest:
      type: object
      required:
        - provider
        - code
      properties:
        provider:
          type: string
          enum: [google, github]
        code:
          type: string
        redirectUri:
          type: string
          format: uri

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: integer
          description: Seconds until token expiration
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        institution:
          type: string
        researchInterests:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        isEmailVerified:
          type: boolean
        avatarUrl:
          type: string
          format: uri
          nullable: true

    Project:
      type: object
      required:
        - name
        - domain
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
        topics:
          type: array
          items:
            type: string
        description:
          type: string
        papersCount:
          type: integer
          description: Number of papers in the project
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time
          description: Time of the last activity in the project

    Paper:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        doi:
          type: string
        abstract:
          type: string
        publication:
          type: string
          description: Journal or conference name
        publicationDate:
          type: string
          format: date
        url:
          type: string
          format: uri
        pdfUrl:
          type: string
          format: uri
          nullable: true
        summary:
          type: string
          nullable: true
        extractedText:
          type: string
          nullable: true
        extractionStatus:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
          default: PENDING
        score:
          type: number
          format: float
          nullable: true
        readingStatus:
          type: string
          enum: [TO_READ, READING, DONE]
          default: TO_READ
        notes:
          type: string
        labels:
          type: array
          items:
            type: string
        citationCount:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaperBatchRequest:
      type: object
      properties:
        paperIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          maxItems: 50
          description: List of paper IDs to process

    TopicSuggestion:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        rationale:
          type: string
        relevanceScore:
          type: number
          format: float
        relatedPapers:
          type: array
          items:
            $ref: '#/components/schemas/PaperReference'
        createdAt:
          type: string
          format: date-time

    PaperReference:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        relevanceScore:
          type: number
          format: float

    GapAnalysis:
      type: object
      properties:
        id:
          type: string
          format: uuid
        gaps:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
              confidenceScore:
                type: number
                format: float
              relatedPapers:
                type: array
                items:
                  $ref: '#/components/schemas/PaperReference'
        overallConfidenceScore:
          type: number
          format: float
        analysisDate:
          type: string
          format: date-time
        basedOnPaperCount:
          type: integer
          description: Number of papers analyzed

    ChatMessage:
      type: object
      required:
        - content
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        role:
          type: string
          enum: [user, assistant]
        timestamp:
          type: string
          format: date-time
        references:
          type: array
          items:
            $ref: '#/components/schemas/PaperReference'

    ChatConversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        paperIds:
          type: array
          items:
            type: string
            format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ReminderRequest:
      type: object
      required:
        - reminderDate
      properties:
        reminderDate:
          type: string
          format: date-time
          description: When to send the reminder
        calendarIntegration:
          type: boolean
          default: false
          description: Whether to create a calendar event
        notificationType:
          type: string
          enum: [EMAIL, PUSH, BOTH]
          default: EMAIL
        note:
          type: string
          description: Optional note for the reminder

    CalendarConfig:
      type: object
      properties:
        provider:
          type: string
          enum: [GOOGLE, MICROSOFT, APPLE]
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time
        calendarId:
          type: string
          description: ID of the user's preferred calendar

    Reminder:
      type: object
      properties:
        id:
          type: string
          format: uuid
        paperId:
          type: string
          format: uuid
        paperTitle:
          type: string
        reminderDate:
          type: string
          format: date-time
        calendarEventId:
          type: string
          nullable: true
          description: ID of created calendar event, if any
        calendarProvider:
          type: string
          enum: [GOOGLE, MICROSOFT, APPLE]
          nullable: true
        notificationType:
          type: string
          enum: [EMAIL, PUSH, BOTH]
        note:
          type: string
        createdAt:
          type: string
          format: date-time
        sentAt:
          type: string
          format: date-time
          nullable: true

    ReadingListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        paperId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        status:
          type: string
          enum: [TO_READ, READING, DONE]
        priority:
          type: integer
          minimum: 1
          maximum: 5
        addedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
        
    PaperScoring:
      type: object
      properties:
        id:
          type: string
          format: uuid
        paperId:
          type: string
          format: uuid
        overallScore:
          type: number
          format: float
        citationScore:
          type: number
          format: float
        relevanceScore:
          type: number
          format: float
        methodologyScore:
          type: number
          format: float
        venueRank:
          type: number
          format: float
        authorPrestige:
          type: number
          format: float
        scoreDate:
          type: string
          format: date-time
        
    ScoreRequest:
      type: object
      properties:
        paperIds:
          type: array
          items:
            type: string
            format: uuid
        criteria:
          type: array
          items:
            type: string
            enum: [citations, relevance, methodology, venue, authors, all]
          default: ["all"]

    WorkflowStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [EXTRACTION, SUMMARIZATION, GAP_ANALYSIS, TOPIC_SUGGESTION, SCORING]
        status:
          type: string
          enum: [QUEUED, PROCESSING, COMPLETED, FAILED]
        progress:
          type: integer
          minimum: 0
          maximum: 100
        message:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        resultId:
          type: string
          format: uuid
          nullable: true
          description: ID of the resulting resource

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions for the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RateLimitError'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: Service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Accepted:
      description: Request accepted, processing asynchronously
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WorkflowStatus'

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/verify-email:
    post:
      tags: [Authentication]
      summary: Verify email address with OTP
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  verified:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/resend-otp:
    post:
      tags: [Authentication]
      summary: Resend verification OTP
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendOtpRequest'
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Initiate password reset process
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/reset-password:
    post:
      tags: [Authentication]
      summary: Reset password with token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/social:
    post:
      tags: [Authentication]
      summary: Authenticate with social provider
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialAuthRequest'
      responses:
        '200':
          description: Social authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user and issue JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token using a valid refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Invalidate current tokens and logout
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/profile:
    get:
      tags: [Authentication]
      summary: Get current user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    put:
      tags: [Authentication]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                institution:
                  type: string
                researchInterests:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/calendar-integration:
    post:
      tags: [Authentication]
      summary: Configure calendar integration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarConfig'
      responses:
        '200':
          description: Calendar integration configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      tags: [Authentication]
      summary: Get calendar integration status
      responses:
        '200':
          description: Calendar integration status
          content:
            application/json:
              schema:
                type: object
                properties:
                  integrations:
                    type: array
                    items:
                      type: object
                      properties:
                        provider:
                          type: string
                          enum: [GOOGLE, MICROSOFT, APPLE]
                        connected:
                          type: boolean
                        expiresAt:
                          type: string
                          format: date-time
                          nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'

  /projects:
    get:
      tags: [Projects]
      summary: Retrieve a paginated list of projects
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    post:
      tags: [Projects]
      summary: Create a new research project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: Get details of a specific project
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Projects]
      summary: Update an existing project
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    delete:
      tags: [Projects]
      summary: Delete a project and all associated data
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '204':
          description: Project deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /projects/{projectId}/papers:
    get:
      tags: [Papers]
      summary: List papers in a project (paginated)
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - name: status
          in: query
          schema:
            type: string
            enum: [TO_READ, READING, DONE, ALL]
            default: ALL
          description: Filter by reading status
        - name: query
          in: query
          schema:
            type: string
          description: Search term for paper title, authors, or abstract
      responses:
        '200':
          description: Papers in project
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Paper'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    post:
      tags: [Papers]
      summary: Fetch new papers for the project using AI agents
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - count
              properties:
                count:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 20
                additionalTopics:
                  type: array
                  items:
                    type: string
                  description: Additional topics to include in the search
                timeframe:
                  type: string
                  enum: [RECENT, ALL_TIME, LAST_YEAR, LAST_5_YEARS, LAST_10_YEARS]
                  default: RECENT
                  description: Timeframe for paper publication date
                includePreprints:
                  type: boolean
                  default: true
                  description: Whether to include preprints
                preferHighCitations:
                  type: boolean
                  default: false
                  description: Whether to prioritize highly cited papers
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /projects/{projectId}/papers/import:
    post:
      tags: [Papers]
      summary: Import papers from DOIs, URLs, or file uploads
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dois:
                  type: array
                  items:
                    type: string
                  description: List of DOIs to import
                urls:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: List of URLs to papers or PDFs
                autoExtract:
                  type: boolean
                  default: true
                  description: Whether to automatically extract content
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      
  /papers/{paperId}:
    get:
      tags: [Papers]
      summary: Get details of a specific paper
      parameters:
        - $ref: '#/components/parameters/paperId'
      responses:
        '200':
          description: Paper details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paper'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags: [Papers]
      summary: Update paper details
      parameters:
        - $ref: '#/components/parameters/paperId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                authors:
                  type: array
                  items:
                    type: string
                abstract:
                  type: string
                notes:
                  type: string
                labels:
                  type: array
                  items:
                    type: string
                readingStatus:
                  type: string
                  enum: [TO_READ, READING, DONE]
      responses:
        '200':
          description: Paper updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paper'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    
    delete:
      tags: [Papers]
      summary: Remove a paper from a project
      parameters:
        - $ref: '#/components/parameters/paperId'
      responses:
        '204':
          description: Paper removed
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /papers/{paperId}/extract:
    post:
      tags: [Papers]
      summary: Extract and summarize the content of a paper
      parameters:
        - $ref: '#/components/parameters/paperId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                summarize:
                  type: boolean
                  default: true
                  description: Whether to generate a summary after extraction
                extractSections:
                  type: array
                  items:
                    type: string
                    enum: [ABSTRACT, INTRODUCTION, METHODS, RESULTS, DISCUSSION, CONCLUSION, ALL]
                  default: ["ALL"]
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /papers/batch/extract:
    post:
      tags: [Papers]
      summary: Extract and summarize multiple papers in batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperBatchRequest'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /projects/{projectId}/analyze-gaps:
    post:
      tags: [Analysis]
      summary: Perform gap analysis on project papers
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paperIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Optional list of specific papers to analyze; uses all project papers if not provided
                minPapers:
                  type: integer
                  default: 5
                  minimum: 3
                  description: Minimum number of papers required for analysis
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  
  /projects/{projectId}/gap-analyses:
    get:
      tags: [Analysis]
      summary: Get all gap analyses for a project
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: List of gap analyses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GapAnalysis'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /projects/{projectId}/gap-analyses/{analysisId}:
    get:
      tags: [Analysis]
      summary: Get a specific gap analysis
      parameters:
        - $ref: '#/components/parameters/projectId'
        - name: analysisId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Gap analysis details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GapAnalysis'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects/{projectId}/suggest-topics:
    post:
      tags: [Analysis]
      summary: Generate research topic suggestions
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
                  default: 5
                  minimum: 1
                  maximum: 10
                  description: Number of topic suggestions to generate
                basedOnGapAnalysis:
                  type: string
                  format: uuid
                  description: Optional gap analysis ID to base suggestions on
                specificGap:
                  type: string
                  description: Optional specific gap to focus on
                paperIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Optional list of specific papers to consider
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /projects/{projectId}/topic-suggestions:
    get:
      tags: [Analysis]
      summary: Get all topic suggestions for a project
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: List of topic suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TopicSuggestion'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
          
  /projects/{projectId}/score-papers:
    post:
      tags: [Analysis]
      summary: Score papers on quality and relevance
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreRequest'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /papers/{paperId}/score:
    get:
      tags: [Papers]
      summary: Get detailed scoring for a paper
      parameters:
        - $ref: '#/components/parameters/paperId'
      responses:
        '200':
          description: Paper score details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperScoring'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects/{projectId}/conversations:
    get:
      tags: [Chat]
      summary: Get chat conversations for a project
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatConversation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    post:
      tags: [Chat]
      summary: Create a new chat conversation
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - paperIds
              properties:
                title:
                  type: string
                paperIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatConversation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /projects/{projectId}/conversations/{conversationId}:
    get:
      tags: [Chat]
      summary: Get a specific conversation
      parameters:
        - $ref: '#/components/parameters/projectId'
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatConversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags: [Chat]
      summary: Delete a conversation
      parameters:
        - $ref: '#/components/parameters/projectId'
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Conversation deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /projects/{projectId}/chat:
    post:
      tags: [Chat]
      summary: Send a contextual question to the QA chat
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - conversationId
              properties:
                message:
                  type: string
                conversationId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Chat response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /papers/{paperId}/status:
    put:
      tags: [Reading List]
      summary: Update the reading status of a paper
      parameters:
        - $ref: '#/components/parameters/paperId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [TO_READ, READING, DONE]
                priority:
                  type: integer
                  minimum: 1
                  maximum: 5
                notes:
                  type: string
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingListItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /projects/{projectId}/reading-list:
    get:
      tags: [Reading List]
      summary: Get reading list for a project
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: status
          in: query
          schema:
            type: string
            enum: [TO_READ, READING, DONE, ALL]
            default: ALL
      responses:
        '200':
          description: Reading list items
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/ReadingListItem'
                        - type: object
                          properties:
                            paper:
                              $ref: '#/components/schemas/Paper'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /papers/{paperId}/reminder:
    post:
      tags: [Reminders]
      summary: Schedule a reading reminder for a paper
      parameters:
        - $ref: '#/components/parameters/paperId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReminderRequest'
      responses:
        '201':
          description: Reminder created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    
    get:
      tags: [Reminders]
      summary: Get reminders for a paper
      parameters:
        - $ref: '#/components/parameters/paperId'
      responses:
        '200':
          description: List of reminders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reminder'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /papers/{paperId}/reminder/{reminderId}:
    delete:
      tags: [Reminders]
      summary: Delete a reminder
      parameters:
        - $ref: '#/components/parameters/paperId'
        - name: reminderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Reminder deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /reminders:
    get:
      tags: [Reminders]
      summary: Get all user reminders
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, SENT, ALL]
            default: PENDING
      responses:
        '200':
          description: List of reminders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reminder'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /workflow-status/{statusId}:
    get:
      tags: [Projects]
      summary: Get status of an asynchronous workflow
      parameters:
        - name: statusId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the workflow status to check
      responses:
        '200':
          description: Current workflow status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

externalDocs:
  description: Full ScholarAI developer guide
  url: https://docs.scholarai.com/api